<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linna</title>
    <link>https://linna-li.github.io/</link>
    <description>Recent content on Linna</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linna-li.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>其他用到的指令</title>
      <link>https://linna-li.github.io/2021/raspberry-set-other/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/raspberry-set-other/</guid>
      <description>echo $SHELL cat /etc/shells apt install zsh -y chsh -s /bin/zsh sudo reboot</description>
    </item>
    
    <item>
      <title>安装grafana系统</title>
      <link>https://linna-li.github.io/2021/raspberry-set-grafana/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/raspberry-set-grafana/</guid>
      <description>成果：安装 grafana，从外部 mac 可以 access 到 grafana 页面
 参考文档： https://computingforgeeks.com/how-to-install-grafana-on-ubuntu-debian/ 没有用 apt 指令直接进行安装，是通过 APT 仓库，这样可以拿到更新的版本。（但是这样的话需要自己来开端口） 主要命令：
 sudo apt update 安装 grafana gpg key(查了一下 gpg key 是用来加密的），这一步是为了能够下载 signed 的包。sudo apt-get install -y gnupg2 curl software-properties-common curl https://packages.grafana.com/gpg.key | sudo apt-key add - 安装 Grafana 的 APT 仓库（APT 是安装包管理工具）。sudo add-apt-repository &amp;ldquo;deb https://packages.grafana.com/oss/deb stable main&amp;rdquo; sudo apt-get update sudo apt-get -y install grafana sudo systemctl enable &amp;ndash;now grafana-server 用来启动 server systemctl status grafana-service.</description>
    </item>
    
    <item>
      <title>安装prometheus</title>
      <link>https://linna-li.github.io/2021/raspberry-set-prometheus/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/raspberry-set-prometheus/</guid>
      <description>成果：安装 prometheus 的 node-exporter 来导出 server 的 metrics。prometheus 是用来收集 metrics 的，grafana 通过 pull 的方式去拿数据，然后进行显示。除了 prometheus 之外也有其他的 datasource，比如 influxdb，是通过 push 的方式来向 grafana 发送数据。 参考文档：https://computingforgeeks.com/how-to-monitor-linux-server-performance-with-prometheus-and-grafana-in-5-minutes/
 这个文档也是没有用 apt 指令，是通过 APT 仓库进行安装。但是我搞错了版本，应该用 ARM64的版本，但是我用的是 amd64。amd64 是 x86-64, 后来只能清理了所有的 node-exporter，直接用 apt 重新安装的。（用 lsb_release -a 可以看到 ubuntu 版本）
sudo apt install prometheus-node-exporter sudo systemctl daemon-reload sudo systemctl start prometheus-node-exporter sudo systemctl enable prometheus-node-exporter sudo systemctl status prometheus-node-exporter 成功之后发现从 server 的 local 可以看到 metrics，但是用 mac 上用 curl -GET http://localhost:9100/metrics 没有办法。 用指令来检查端口的开放情况 sudo ufw status verbose 发现 9100 端口没有开放 用指令开放：sudo ufw allow 9100/tcp 因为不熟悉 ubuntu server 的文件结构，所以出错了也不知道应该改哪个文件，只能参考这个文档尽量做到清除干净： http://www.</description>
    </item>
    
    <item>
      <title>安装ubuntu系统</title>
      <link>https://linna-li.github.io/2021/raspberry-set-os/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/raspberry-set-os/</guid>
      <description>成果：安装操作系统；运行温度测试脚本；测试网络速度；安装 git 以及同步信息到外部 mac
 安装操作系统  Use SD Card + SD Card Reader + Macbook Pro only. recommend selecting: Ubuntu 20.04 LTS (Pi 3/4) 64-bit server OS for arm64 architecture
  connect the SD Card reader to the macbook pro Follow the OS install instructions and install ubuntu server 20.04, there are a few options though. https://www.raspberrypi.org/documentation/installation/installing-images/ Put the SD Card into the raspberry pi (the slot is on the bottom of the device).</description>
    </item>
    
    <item>
      <title>设置路由器时要注意的安全问题</title>
      <link>https://linna-li.github.io/2021/router-security/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/router-security/</guid>
      <description>路由器的设置目标和图解 As long as it&#39;s all locked inside your home network it&#39;s relatively safe. We want to reject all incoming connections , all the incoming connections are hackers. Internet to WAN to LAN: All Blocked LAN to WAN to Internet: All Allowed LAN to LAN (Server to Server, like Macbook to Server): Allowed 路由器的各种设置  Be careful of any kind of “cloud setup” where you make an account. Don&#39;t use tp-link cloud service Avoid accessing stuff outside your local network.</description>
    </item>
    
    <item>
      <title>CTCI3-Technical Questions</title>
      <link>https://linna-li.github.io/2021/ctci3/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci3/</guid>
      <description>String和Array总是可以互换的问题
 实现Hashtables 哈希表（Hashtable）又称为“散置”，Hashtable是会根据索引键的哈希程序代码组织成的索引键（Key）和值（Value）配对的集合。
 根据key计算hash值 map hash值到一个index里（array） 每一个index是一个链表，链表里的每一个元素是 (key, value)  实现ArrayList和Resizable Arrays  Resizable Arrays是可变大小的数组 amortized insertion的runtime是O(1) 在向一个list插入数据的时候，每次满了就会把容量扩大一倍，然后之前的复制到新的里面去
 StringBuilder 链接n个相同长度的string时候，如果使用String，时间复杂度是 O(xn^2) 如果使用了StringBuilder（可变长度的string）时间复杂度就是O(n) ?
Interview Question  判断一个String里面的元素是不是都是不重复的，要求不使用一个多余的数据结构  思考： 不能使用map ？ 只是用String 把每一个字符转换为他的Ascii码，存在数组里，如果数组中有数据了，就代表重复的。 时间复杂度O(n), n 为字符串的长度，空间复杂度是需要一个128容量的array
boolean isUnique(String s){ if(s==null||s.length()==0){ return true; } int[] asciiArray = new int[128]; for(int i = 0;i &amp;lt; s.length();i++){ if(asciiArray[Integer.valueOf(s.chatAt(i))]!=0){ return false; }else{ asciiArray[Integer.valueOf(s.chatAt(i))] = 1; } } return true; } 答案：  首先应该问面试官是ASCII还是unicode: ASCII是一个字节(1 byte (字节)= 8 bit(位))，只支持英文；Unicode两个字节支持所有语言；UTF-8是1-6个字节，英文字母一个字节汉字三个字节生僻字4-6个字节； ASCII码一共规定了128个字符的编码（0 000 0000–0 111 1111），比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0  boolean isUniqueChars(String str){ if(str.</description>
    </item>
    
    <item>
      <title>CTCI2-Technical Questions</title>
      <link>https://linna-li.github.io/2021/ctci2/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci2/</guid>
      <description>How to prepare  自己思考，同时要思考复杂度 在纸上写code 纸上测试code（general cases, base cases, error cases) 把纸上的code输入到电脑里，看自己有哪些错误 mock interview  What you need to know  Practicing implementing the data structures and algorithm on paper, then on computer basic： 2^10 大概是 1000， 2^20 大概是1million（100万），2^30 大概是1billion（10亿）= 1GB， 2^40 大概是 1trillion（1万亿）= 1TB  Walking through a problem  Listen: 注意一些特别的词，sorted，repeatedly Draw an Example: 给定值，足够大，不是一个特殊例子 先考虑一个暴力解法，给定时间和空间复杂度 优化：看看有没有没用到的信息；考虑一个新的例子；不正确的解决（？）；tradeoff时间和空间；提前计算；使用hash table；考虑最佳的runtime 检查 写代码: 从左上角开始写，避免倾斜，漂亮的代码（模块化初始化方法，做class，错误检查，命名） 测试: 概念上的测试（假装自己正在给别人讲代码）；有没有看起来奇怪的代码；热点问题；小的测试例子；特殊的例子；  优化  查找瓶颈（优化是瓶颈的那部分才有意义） 去掉不必要的工作（比如说可以用多一步计算来减少一层循环） 去掉重复工作（用hashmap保存下来结果） 假装是自己在做，而不是考虑一个算法 简化和普遍化 从base case开始（n=1） 过一遍所有的数据结构：linkedlist不适合accessing和给是数字排序； Best Conceivable Runtime(BCR) 可能但是不一定会存在的最优时间，一般用于作为hint，也作为时间优化的上限。如果已经达到这时间，说明时间上不能再进行优化，只能优化空间。 当遇到一个考过的问题，要告诉面试官 选择语言：java属于比较易懂的，不用考虑memory和指针。java属于比较冗长的语言，例如python可以直接返回多个值，但是java必须要一个class 好的代码：正确，高效，简洁，可读性，可维护性 正确地使用数据结构 写可以重复使用的代码（抽取重复部分写成一个方法） 可以抽取成方法的写成一个方法（不要把一个方法写的很长） 灵活性（可以对应多种例子，general） 要做错误检查，参数认证检查  </description>
    </item>
    
    <item>
      <title>Cracking the code interview1</title>
      <link>https://linna-li.github.io/2021/ctci1/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci1/</guid>
      <description>BackGround 昨天前辈借我一本书让我读，全英文，所以在昨天晚上的第一次尝试就读着读着睡着了。 今晚我来邻居小姐姐家找她一起学习，顺利地读了一部分。前五章是关于interview的介绍，准备，还有行为测试，就先略过了。 前辈的建议是做完每一章的算法题
Big O Big O 是用来描述一个算法有效性的 O() 空间复杂度，包好了递归函数中用到的变量 可以省略到非主流的部分：O(x!) &amp;gt; O(2^x) &amp;gt; O(x^2) &amp;gt; O(xlogx) &amp;gt; O(x) &amp;gt; O(logx)
Amortized Time(均摊时间)： 在插入数据到ArrayList的时候，正常是在末尾插入，所以复杂度是O(1), 但是满了之后会扩大容量为两倍，然后复制现有的进去，再进行插入，所以花费的时间是n，所以插入x个数据的时间是：1+2+4+&amp;hellip;.+x (省略了不需要复制的时候插入消耗的时间) 所以插入每一个花费的时间是 （1+2+4+&amp;hellip;.+x）/x = 书上说是 O（1） （不太懂 这里）
Log N Runtime Recursive Runtime 2^0+2^1+&amp;hellip;.2^n = 2^(n+1) - 1 如果有递归算法的话，一般来说时间都是 O(branched^depth)
Example and Exercise O(N+M) 不可以认为是 O(N)
Example 8 有一个String的数组，需要给每一个string自己排序，然后给整个string排序，求时间复杂度 首先第一轮循环把每个string排序。排序每一个string需要的时间是 slogs ， 假设一共是a个，所以一共需要 aslogs。 第二轮是排序这个数组 aloga 次比较，每次比较花费s， 所以是saloga 一共花费时间 aslogs + saloga ===》 O(as(logs+loga))</description>
    </item>
    
    <item>
      <title>LeetCode-148</title>
      <link>https://linna-li.github.io/2021/148-sort-list/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/148-sort-list/</guid>
      <description>Description  给一个链表排序，要求 时间复杂度是 O(n logn)，空间复杂度是 O(logn)
 My Answer  这道题我自己没有做出来。。。 T T 我的想法是分成两份, 然后递归进行排序, 注意这个不叫二分排序！！！ 这个的思想其实是快速排序，平均 的时间复杂度是 O(nlogn)～O(n^2)。但是快速排序不适合链表，没办法链接起来 总结排序算法的复杂度：   很好懂的答案是归并排序。归并排序（特点是 可以利用递归来交换数字，适合链表）可以将链表从中间断开，排好序之后merge。 从中间断开的方法是： 1. 快慢指针。2.或者是统计一下长度之后断开
 Complexity  时间复杂度 O(nlogn) 空间复杂度 O(logn)
 Other Answer  因为其实时间复杂度不符合要求，所以最好的方法是用Bottom Up 思想是：https://www.youtube.com/watch?v=M1TwY0nsTZA
 </description>
    </item>
    
    <item>
      <title>LeetCode-19</title>
      <link>https://linna-li.github.io/2021/19-remove-nth-from-end/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/19-remove-nth-from-end/</guid>
      <description>Description  删除从后面数第n个节点 要求只能遍历整个list一遍 这种一般就要两个指针，数学先计算一下了
 My answer  两个指针，一个先走 (n-1) 步； 另一个现在出发，走 length - 1 - (n - 1)； 倒数第n = 正数第 length - n + 1 = 正着走 length - n 步
 Complexity  时间复杂度 O(n) 空间复杂度 用了两个指针
 Other answer   </description>
    </item>
    
    <item>
      <title>LeetCode-203</title>
      <link>https://linna-li.github.io/2021/203-remove-linked-list-elements/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/203-remove-linked-list-elements/</guid>
      <description>Description  从链表中删除给定的节点 给定了头节点，被删除的节点会有很多个
 My Answer  把自己的前一个节点的next指向自己的next 所以需要存下来before 注意记得修改before
 Complexity  时间复杂度 O(n), 不需要再优化了 空间复杂度 O(1), 用了两个节点保存前一个节点和本身
 Other Answer  大神们的解法使用递归，这样就需要多余的空间了 3 line recursive solution
 </description>
    </item>
    
    <item>
      <title>LeetCode-21</title>
      <link>https://linna-li.github.io/2021/21-merge-two-sorted-lists/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/21-merge-two-sorted-lists/</guid>
      <description>Description  合并两个有序的链表
 My answer  是一个easy的题，但是我感觉写的好长，肯定有简单办法来解 我是定义了一个head，一个current，然后两个指针分别移动两个链表 比较大小，然后合并
 Complexity  时间复杂度 O(n + m) 空间复杂度 用了4个指针
 Other answer  和我的想法类似，但是只用了两个指针。一个head保存答案，一个handler保存在哪个list。 用递归  </description>
    </item>
    
    <item>
      <title>LeetCode-83</title>
      <link>https://linna-li.github.io/2021/83-remove-duplicated-from-sorted-list/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/83-remove-duplicated-from-sorted-list/</guid>
      <description>Description  给了一个链表，删除其中重复的节点
 My Answer  我的思路很简单 存下before和current的节点，进行比较 记得判断边界case，head是null的情况
 Complexity 我自己的解法时间复杂度应该是O(n)了，但是结果却是：
 Runtime: 1 ms, faster than 15.21% of Java online submissions for Remove Duplicates from Sorted List. Memory Usage: 41.4 MB, less than 6.06% of Java online submissions for Remove Duplicates from Sorted List.
 Other Answer  可以优化成为只要一个辅助节点。优化过后是：   Runtime: 0 ms, faster than 100.00% of Java online submissions for Remove Duplicates from Sorted List. Memory Usage: 38.</description>
    </item>
    
    <item>
      <title>LeetCode-237</title>
      <link>https://linna-li.github.io/2021/237-delete-node-in-a-linked-list/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/237-delete-node-in-a-linked-list/</guid>
      <description>Description  从链表中删除给定的节点 没有给定头节点，只给定了要被删掉的节点
 My Answer  这是一道easy题，但是好多人dislike，确实我自己也想不到这个解法，最后还是看了答案 但是没有办法找到上一个节点，所以只能把自己的值改成下一个节点的值，然后把自己的next修改掉
 Complexity Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-160</title>
      <link>https://linna-li.github.io/2021/160-intersection-of-two-linked-lists/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/160-intersection-of-two-linked-lists/</guid>
      <description>Description  找到两个链表的交点
 My answer  这是一道easy题，但是要求时间复杂度是O(n)，于是我想了好久。。 后来发现最笨的方法也可以过 就是现求出来两个链表的差距，然后走到相同的相对位置上，看看能不能找到一个相同的节点，如果能找到，就说明这个节点是相交的节点（因为后面不会再分叉开了）
 Complexity Other answer  后来我去看了讨论区，大部分人还是和我一样的解法，有一个大神的解法代码更简单，两个指针一起走，走到头了之后就去另外一个链表接着走，直到找到一个相同的节点，或者两个都是null的时候，说明没有相交节点
 </description>
    </item>
    
    <item>
      <title>LeetCode-141</title>
      <link>https://linna-li.github.io/2021/141-linked-list-cycle/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/141-linked-list-cycle/</guid>
      <description>Description My Answer  这道题我记得思路是快慢指针, 但是纠结了好久怎么证明，后来小伙伴提醒我说线性增长，有环的话一定会相遇。循环的结束条件都是查快指针就可以
 Complexity  时间复杂度 O(n), 不需要再优化了 空间复杂度 O(1), 用了两个指针
 Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-142</title>
      <link>https://linna-li.github.io/2021/142-linked-list-cycle-ii/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/142-linked-list-cycle-ii/</guid>
      <description>Description  如果链中有环，找到环的入口
 My Answer  大神给画的图.
  快指针和慢指针会在环的内部相遇 经过推导可以知道 起点到环入口的长度==相遇点到环入口的长度 让快慢指针每次走一步就可以找到环入口的长度
 Complexity Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-2</title>
      <link>https://linna-li.github.io/2020/2-add-two-numbers/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2020/2-add-two-numbers/</guid>
      <description>Description My Answer Complexity Other Answer </description>
    </item>
    
    <item>
      <title>Try Http3 QUIC By using CURL</title>
      <link>https://linna-li.github.io/2020/try-curl-http3-quic/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2020/try-curl-http3-quic/</guid>
      <description>Use ngtcp2  &amp;quot;Call it TCP/2. One More Time.&amp;rdquo;
 ngtcp2 project is an effort to implement QUIC protocol which is now being discussed in IETF QUICWG for its standardization.
Build Build OpenSSL
git clone --depth 1 -b openssl-quic-draft-23 https://github.com/tatsuhiro-t/openssl cd openssl ./config enable-tls1_3 --prefix=/usr/local/include/openssl make make install_sw Build nghttp3
Make sure you have installed automake and autoconf
git clone https://github.com/ngtcp2/nghttp3 cd nghttp3 autoreconf -i ./configure --prefix=/usr/local/include/nghttp3 --enable-lib-only make make install Build ngtcp2</description>
    </item>
    
    <item>
      <title>超入門個人用Python Note</title>
      <link>https://linna-li.github.io/2020/python-install/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2020/python-install/</guid>
      <description>BackGround  Recently, there is a new 後輩 joined my team who is very good at Python, so i think i got a good chance to start learning python. ^ ^
 What i learned Before:
Only know there is a language called python
After:
But it has many &amp;ldquo;friends?&amp;rdquo;
Python2, Python3-&amp;gt; 2 python version
pyenv -&amp;gt; a tool that is used to change which version
pip3, pip -&amp;gt; pip3 is used to download dependency for python2, pip is for python2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linna-li.github.io/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/readme/</guid>
      <description>linna.github.io Access by: https://linna-li.github.io/ or I will buy a domain when I have money.</description>
    </item>
    
  </channel>
</rss>