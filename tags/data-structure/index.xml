<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data-structure on Linna</title>
    <link>https://linna-li.github.io/tags/data-structure/</link>
    <description>Recent content in data-structure on Linna</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linna-li.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CTCI7-Bit-manipulation</title>
      <link>https://linna-li.github.io/2021/cict7-bit-manipulation/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict7-bit-manipulation/</guid>
      <description>二进制处理 ^是异或XOR
处理技巧  0110 + 0110 相当于乘2，即左移动一位 与自己本身取反的数进行异或，一定得到全是1的一串  Two&#39;s Complement and Negative Numbers 计算机使用 *二进制补码（Two&#39;s Complement）*来存储整数的 正数存的是自己； 负数存的是他的 绝对值（absolute value）的补码，符号位是1，表示这是一个负数；
一个N位不带符号数（即绝对值）的补码，是 （2^N - 本身） 英语叫做the complement of the number with respect to 2^N. 即 -K (negative K) as a N-bit(包括符号位) number 是 concat(1, 2^(N-1) - K) 比如说 占四个二进制位 一位是符号为，三位表示数 如果要求3的补码，就是5，5是101，所以-3就是 1101
也可以直接算：绝对值是3是011， 取反+1 = 100 + 1 = 101，再加上符号位 算数和逻辑右移 算数右移相当于除以2 用 &amp;raquo; 1 最左边一位补和之前相同的符号(所以一个负数一直进行算数右移动会得到 -1) 逻辑右移相当于用 &amp;raquo;&amp;gt;1 最左边一位补0</description>
    </item>
    
    <item>
      <title>CTCI6-Trees-and-graphs</title>
      <link>https://linna-li.github.io/2021/cict6-trees-and-graphs/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict6-trees-and-graphs/</guid>
      <description>基础知识  树：Binary Tree, Binary Search Tree, 平衡与非平衡， 完全二叉树，满二叉树，完美二叉树，三种遍历方式，二叉堆（大顶堆和小顶堆）， 前缀树：用*来表示是一个完整的单词了，可以用来进行快速的前缀搜索 图：树是一种没有环的图。 acyclic 无环 有两种方式经常用来表示图：adjacent 临近的。a(推荐).用 Node 来表示图中所有的点，node 里面有与他相连的其他 Node；b.邻接矩阵表示 matrix[i][j] 图的搜索：深度优先（适用于如果我们想访问所有 node） 广度优先（适用于找指定两个点中间的最短路径） 两个方向的搜索：两个起点一起开始找  题目  有向图，找两个点之间是否有 route  // 广度优先搜索 enum State{ Unvisited, Visited, Visiting} boolean search(Graph g, Node start,Node end){ if(start == end) return true; LinkdList&amp;lt;Node&amp;gt; q = new LinkedList&amp;lt;Node&amp;gt;(); for(Node u:g.getNodes()){ u.state = State.Unvisited; } start.state = State.Visiting; q.add(start); Node u; while(!q.isEmpty()){ u = q.removeFirst(); if(u!=null){ for(Node v:u.</description>
    </item>
    
    <item>
      <title>CTCI5-stacks-and-queues</title>
      <link>https://linna-li.github.io/2021/cict5-stacks-and-queues/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict5-stacks-and-queues/</guid>
      <description>基础知识  注意栈的问题要检查有没有满，是不是空 shift 的意思是 对齐（移动）  题目  用一个数组实现三个栈   解法 1: 如果可以三个栈的大小都固定，可以直接把数组划分成三部分即可  class FixedMultiStack { private int numberOfStacks = 3; private int stackCapacity; private int[] values; private int[] sizes; public FixedMultiStack(int stackSize){ stackCapacity = stackSize; values = new int[stackSize * numberOfStacks]; sizes = new int[numberOfStacks]; } public void push(int stackNum, int value) throws FullStackException { if(isFull(stackNum)){ throw new FullStackException(); } sizes[stackNum]++; values[indexOfTop(stackNum)] = value; } private int indexOfTop(int stackNum){ // 开始位置  int offSet = stackNum * stackCapacity; int size = size[stackNum]; return offset + size - 1; } public int peek(int stackNum){ if(isEmpty(stackNum)){ throw new EmptyStackException(); } return values[indexOfTop(stackNum)]; } public int pop(int stackNum){ if(isEmpty(stackNum)){ throw new EmptyStackException(); } int topIndex = indexOfTop(stackNum); int value = values[topIndex]; values[topIndex]=0; sizes[stackNum]--; return value; } }  解法 2: 要想更加灵活，如果一个满了可以 expand 扩充，扩充的意思就是去拿下一个 stack 的一个空间（下一个 stack 就少了一个空间）同时需要把下一 stack 进行移动（shift）如果下一个 stack 也满了就要去下下一个 stack 拿，两个 stack 都要进行 shift，以此类推。 Note: java 在进行取余操作的时候会返回负数  private void (int stackNum){ shift((stack+1)%info.</description>
    </item>
    
    <item>
      <title>CTCI4-LinkedList</title>
      <link>https://linna-li.github.io/2021/ctci4-linkedlist/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci4-linkedlist/</guid>
      <description>基础知识  注意 null, 头节点，尾节点 Runner 技术，即两个指针，一快一慢 递归解法总需要至少 O(n)的空间 需要移除元素的时候都要保存一个 previous 节点  题目  从一个没有排序的链表中删除重复的元素（要求考虑不用多余空间的解法）   解法 1: 使用多余空间来保存已经出现过的元素，HashSet 就可以  void deleteDups(LinkedListNode n){ // 应该确认一下是不是都是数字  HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;Integer&amp;gt;(); LinkedListNode previous = null; while(n!=null){ if(set.contains(n.data)){ previous.next = n.next; }else{ set.add(n.data); previous = n; } } n = n.next; }  解法 2: 不使用多余空间，就要对每个节点查一下全部的 list，时间复杂度是 O(n*n)  void deleteDups(LinkedListNode head){ LinkedListNode current = head; while(current!=null){ LinkedListNode runner = current; while(runner.</description>
    </item>
    
    <item>
      <title>CTCI3-Arrays and Strings</title>
      <link>https://linna-li.github.io/2021/ctci3-arrays-and-strings/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci3-arrays-and-strings/</guid>
      <description>String 和 Array 总是可以互换的问题
 实现 Hashtables 哈希表（Hashtable）又称为“散置”，Hashtable 是会根据索引键的哈希程序代码组织成的索引键（Key）和值（Value）配对的集合。
 根据 key 计算 hash 值 map hash 值到一个 index 里（array） 每一个 index 是一个链表，链表里的每一个元素是 (key, value)  实现 ArrayList 和 Resizable Arrays  Resizable Arrays 是可变大小的数组 amortized insertion 的 runtime 是 O(1) 在向一个 list 插入数据的时候，每次满了就会把容量扩大一倍，然后之前的复制到新的里面去
 StringBuilder 链接 n 个相同长度的 string 时候，如果使用 String，时间复杂度是 O(xn^2) 如果使用了 StringBuilder（可变长度的 string）时间复杂度就是 O(n) ?
Interview Question  判断一个 String 里面的元素是不是都是不重复的，要求不使用一个多余的数据结构  思考： 不能使用 map ？ 只是用 String 把每一个字符转换为他的 Ascii 码，存在数组里，如果数组中有数据了，就代表重复的。 时间复杂度 O(n), n 为字符串的长度，空间复杂度是需要一个 128 容量的 array</description>
    </item>
    
  </channel>
</rss>