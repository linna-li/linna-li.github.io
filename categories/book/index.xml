<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>book on Linna</title>
    <link>https://linna-li.github.io/categories/book/</link>
    <description>Recent content in book on Linna</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linna-li.github.io/categories/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CTCI7-Bit-manipulation</title>
      <link>https://linna-li.github.io/2021/cict7-bit-manipulation/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict7-bit-manipulation/</guid>
      <description>二进制处理 ^是异或XOR
处理技巧  0110 + 0110 相当于乘2，即左移动一位 与自己本身取反的数进行异或，一定得到全是1的一串  Two&#39;s Complement and Negative Numbers 计算机使用 *二进制补码（Two&#39;s Complement）*来存储整数的 正数存的是自己； 负数存的是他的 绝对值（absolute value）的补码，符号位是1，表示这是一个负数；
一个N位不带符号数（即绝对值）的补码，是 （2^N - 本身） 英语叫做the complement of the number with respect to 2^N. 即 -K (negative K) as a N-bit(包括符号位) number 是 concat(1, 2^(N-1) - K) 比如说 占四个二进制位 一位是符号为，三位表示数 如果要求3的补码，就是5，5是101，所以-3就是 1101
也可以直接算：绝对值是3是011， 取反+1 = 100 + 1 = 101，再加上符号位 算数和逻辑右移 算数右移相当于除以2 用 &amp;raquo; 1 最左边一位补和之前相同的符号(所以一个负数一直进行算数右移动会得到 -1) 逻辑右移相当于用 &amp;raquo;&amp;gt;1 最左边一位补0</description>
    </item>
    
    <item>
      <title>CTCI6-Trees-and-graphs</title>
      <link>https://linna-li.github.io/2021/cict6-trees-and-graphs/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict6-trees-and-graphs/</guid>
      <description>基础知识  树：Binary Tree, Binary Search Tree, 平衡与非平衡， 完全二叉树，满二叉树，完美二叉树，三种遍历方式，二叉堆（大顶堆和小顶堆）， 前缀树：用*来表示是一个完整的单词了，可以用来进行快速的前缀搜索 图：树是一种没有环的图。 acyclic 无环 有两种方式经常用来表示图：adjacent 临近的。a(推荐).用 Node 来表示图中所有的点，node 里面有与他相连的其他 Node；b.邻接矩阵表示 matrix[i][j] 图的搜索：深度优先（适用于如果我们想访问所有 node） 广度优先（适用于找指定两个点中间的最短路径） 两个方向的搜索：两个起点一起开始找  题目  有向图，找两个点之间是否有 route  // 广度优先搜索 enum State{ Unvisited, Visited, Visiting} boolean search(Graph g, Node start,Node end){ if(start == end) return true; LinkdList&amp;lt;Node&amp;gt; q = new LinkedList&amp;lt;Node&amp;gt;(); for(Node u:g.getNodes()){ u.state = State.Unvisited; } start.state = State.Visiting; q.add(start); Node u; while(!q.isEmpty()){ u = q.removeFirst(); if(u!=null){ for(Node v:u.</description>
    </item>
    
    <item>
      <title>CTCI5-stacks-and-queues</title>
      <link>https://linna-li.github.io/2021/cict5-stacks-and-queues/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/cict5-stacks-and-queues/</guid>
      <description>基础知识  注意栈的问题要检查有没有满，是不是空 shift 的意思是 对齐（移动）  题目  用一个数组实现三个栈   解法 1: 如果可以三个栈的大小都固定，可以直接把数组划分成三部分即可  class FixedMultiStack { private int numberOfStacks = 3; private int stackCapacity; private int[] values; private int[] sizes; public FixedMultiStack(int stackSize){ stackCapacity = stackSize; values = new int[stackSize * numberOfStacks]; sizes = new int[numberOfStacks]; } public void push(int stackNum, int value) throws FullStackException { if(isFull(stackNum)){ throw new FullStackException(); } sizes[stackNum]++; values[indexOfTop(stackNum)] = value; } private int indexOfTop(int stackNum){ // 开始位置  int offSet = stackNum * stackCapacity; int size = size[stackNum]; return offset + size - 1; } public int peek(int stackNum){ if(isEmpty(stackNum)){ throw new EmptyStackException(); } return values[indexOfTop(stackNum)]; } public int pop(int stackNum){ if(isEmpty(stackNum)){ throw new EmptyStackException(); } int topIndex = indexOfTop(stackNum); int value = values[topIndex]; values[topIndex]=0; sizes[stackNum]--; return value; } }  解法 2: 要想更加灵活，如果一个满了可以 expand 扩充，扩充的意思就是去拿下一个 stack 的一个空间（下一个 stack 就少了一个空间）同时需要把下一 stack 进行移动（shift）如果下一个 stack 也满了就要去下下一个 stack 拿，两个 stack 都要进行 shift，以此类推。 Note: java 在进行取余操作的时候会返回负数  private void (int stackNum){ shift((stack+1)%info.</description>
    </item>
    
    <item>
      <title>CTCI4-LinkedList</title>
      <link>https://linna-li.github.io/2021/ctci4-linkedlist/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci4-linkedlist/</guid>
      <description>基础知识  注意 null, 头节点，尾节点 Runner 技术，即两个指针，一快一慢 递归解法总需要至少 O(n)的空间 需要移除元素的时候都要保存一个 previous 节点  题目  从一个没有排序的链表中删除重复的元素（要求考虑不用多余空间的解法）   解法 1: 使用多余空间来保存已经出现过的元素，HashSet 就可以  void deleteDups(LinkedListNode n){ // 应该确认一下是不是都是数字  HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;Integer&amp;gt;(); LinkedListNode previous = null; while(n!=null){ if(set.contains(n.data)){ previous.next = n.next; }else{ set.add(n.data); previous = n; } } n = n.next; }  解法 2: 不使用多余空间，就要对每个节点查一下全部的 list，时间复杂度是 O(n*n)  void deleteDups(LinkedListNode head){ LinkedListNode current = head; while(current!=null){ LinkedListNode runner = current; while(runner.</description>
    </item>
    
    <item>
      <title>CTCI3-Arrays and Strings</title>
      <link>https://linna-li.github.io/2021/ctci3-arrays-and-strings/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci3-arrays-and-strings/</guid>
      <description>String 和 Array 总是可以互换的问题
 实现 Hashtables 哈希表（Hashtable）又称为“散置”，Hashtable 是会根据索引键的哈希程序代码组织成的索引键（Key）和值（Value）配对的集合。
 根据 key 计算 hash 值 map hash 值到一个 index 里（array） 每一个 index 是一个链表，链表里的每一个元素是 (key, value)  实现 ArrayList 和 Resizable Arrays  Resizable Arrays 是可变大小的数组 amortized insertion 的 runtime 是 O(1) 在向一个 list 插入数据的时候，每次满了就会把容量扩大一倍，然后之前的复制到新的里面去
 StringBuilder 链接 n 个相同长度的 string 时候，如果使用 String，时间复杂度是 O(xn^2) 如果使用了 StringBuilder（可变长度的 string）时间复杂度就是 O(n) ?
Interview Question  判断一个 String 里面的元素是不是都是不重复的，要求不使用一个多余的数据结构  思考： 不能使用 map ？ 只是用 String 把每一个字符转换为他的 Ascii 码，存在数组里，如果数组中有数据了，就代表重复的。 时间复杂度 O(n), n 为字符串的长度，空间复杂度是需要一个 128 容量的 array</description>
    </item>
    
    <item>
      <title>CTCI2-Technical Questions</title>
      <link>https://linna-li.github.io/2021/ctci2-technical/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci2-technical/</guid>
      <description>How to prepare  自己思考，同时要思考复杂度 在纸上写code 纸上测试code（general cases, base cases, error cases) 把纸上的code输入到电脑里，看自己有哪些错误 mock interview  What you need to know  Practicing implementing the data structures and algorithm on paper, then on computer basic： 2^10 大概是 1000， 2^20 大概是1million（100万），2^30 大概是1billion（10亿）= 1GB， 2^40 大概是 1trillion（1万亿）= 1TB  Walking through a problem  Listen: 注意一些特别的词，sorted，repeatedly Draw an Example: 给定值，足够大，不是一个特殊例子 先考虑一个暴力解法，给定时间和空间复杂度 优化：看看有没有没用到的信息；考虑一个新的例子；不正确的解决（？）；tradeoff时间和空间；提前计算；使用hash table；考虑最佳的runtime 检查 写代码: 从左上角开始写，避免倾斜，漂亮的代码（模块化初始化方法，做class，错误检查，命名） 测试: 概念上的测试（假装自己正在给别人讲代码）；有没有看起来奇怪的代码；热点问题；小的测试例子；特殊的例子；  优化  查找瓶颈（优化是瓶颈的那部分才有意义） 去掉不必要的工作（比如说可以用多一步计算来减少一层循环） 去掉重复工作（用hashmap保存下来结果） 假装是自己在做，而不是考虑一个算法 简化和普遍化 从base case开始（n=1） 过一遍所有的数据结构：linkedlist不适合accessing和给是数字排序； Best Conceivable Runtime(BCR) 可能但是不一定会存在的最优时间，一般用于作为hint，也作为时间优化的上限。如果已经达到这时间，说明时间上不能再进行优化，只能优化空间。 当遇到一个考过的问题，要告诉面试官 选择语言：java属于比较易懂的，不用考虑memory和指针。java属于比较冗长的语言，例如python可以直接返回多个值，但是java必须要一个class 好的代码：正确，高效，简洁，可读性，可维护性 正确地使用数据结构 写可以重复使用的代码（抽取重复部分写成一个方法） 可以抽取成方法的写成一个方法（不要把一个方法写的很长） 灵活性（可以对应多种例子，general） 要做错误检查，参数认证检查  </description>
    </item>
    
    <item>
      <title>Cracking the code interview1</title>
      <link>https://linna-li.github.io/2021/ctci1-basic-knowledge/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/ctci1-basic-knowledge/</guid>
      <description>BackGround 昨天前辈借我一本书让我读，全英文，所以在昨天晚上的第一次尝试就读着读着睡着了。 今晚我来邻居小姐姐家找她一起学习，顺利地读了一部分。前五章是关于interview的介绍，准备，还有行为测试，就先略过了。 前辈的建议是做完每一章的算法题
Big O Big O 是用来描述一个算法有效性的 O() 空间复杂度，包好了递归函数中用到的变量 可以省略到非主流的部分：O(x!) &amp;gt; O(2^x) &amp;gt; O(x^2) &amp;gt; O(xlogx) &amp;gt; O(x) &amp;gt; O(logx)
Amortized Time(均摊时间)： 在插入数据到ArrayList的时候，正常是在末尾插入，所以复杂度是O(1), 但是满了之后会扩大容量为两倍，然后复制现有的进去，再进行插入，所以花费的时间是n，所以插入x个数据的时间是：1+2+4+&amp;hellip;.+x (省略了不需要复制的时候插入消耗的时间) 所以插入每一个花费的时间是 （1+2+4+&amp;hellip;.+x）/x = 书上说是 O（1） （不太懂 这里）
Log N Runtime Recursive Runtime 2^0+2^1+&amp;hellip;.2^n = 2^(n+1) - 1 如果有递归算法的话，一般来说时间都是 O(branched^depth)
Example and Exercise O(N+M) 不可以认为是 O(N)
Example 8 有一个String的数组，需要给每一个string自己排序，然后给整个string排序，求时间复杂度 首先第一轮循环把每个string排序。排序每一个string需要的时间是 slogs ， 假设一共是a个，所以一共需要 aslogs。 第二轮是排序这个数组 aloga 次比较，每次比较花费s， 所以是saloga 一共花费时间 aslogs + saloga ===》 O(as(logs+loga))</description>
    </item>
    
  </channel>
</rss>