<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataStructure on Linna</title>
    <link>https://linna-li.github.io/categories/datastructure/</link>
    <description>Recent content in DataStructure on Linna</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://linna-li.github.io/categories/datastructure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode-148</title>
      <link>https://linna-li.github.io/2021/148-sort-list/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/148-sort-list/</guid>
      <description>Description  给一个链表排序，要求 时间复杂度是 O(n logn)，空间复杂度是 O(logn)
 My Answer  这道题我自己没有做出来。。。 T T 我的想法是分成两份, 然后递归进行排序, 注意这个不叫二分排序！！！ 这个的思想其实是快速排序，平均 的时间复杂度是 O(nlogn)～O(n^2)。但是快速排序不适合链表，没办法链接起来 总结排序算法的复杂度：   很好懂的答案是归并排序。归并排序（特点是 可以利用递归来交换数字，适合链表）可以将链表从中间断开，排好序之后merge。 从中间断开的方法是： 1. 快慢指针。2.或者是统计一下长度之后断开
 Complexity  时间复杂度 O(nlogn) 空间复杂度 O(logn)
 Other Answer  因为其实时间复杂度不符合要求，所以最好的方法是用Bottom Up 思想是：https://www.youtube.com/watch?v=M1TwY0nsTZA
 </description>
    </item>
    
    <item>
      <title>LeetCode-19</title>
      <link>https://linna-li.github.io/2021/19-remove-nth-from-end/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/19-remove-nth-from-end/</guid>
      <description>Description  删除从后面数第n个节点 要求只能遍历整个list一遍 这种一般就要两个指针，数学先计算一下了
 My answer  两个指针，一个先走 (n-1) 步； 另一个现在出发，走 length - 1 - (n - 1)； 倒数第n = 正数第 length - n + 1 = 正着走 length - n 步
 Complexity  时间复杂度 O(n) 空间复杂度 用了两个指针
 Other answer   </description>
    </item>
    
    <item>
      <title>LeetCode-203</title>
      <link>https://linna-li.github.io/2021/203-remove-linked-list-elements/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/203-remove-linked-list-elements/</guid>
      <description>Description  从链表中删除给定的节点 给定了头节点，被删除的节点会有很多个
 My Answer  把自己的前一个节点的next指向自己的next 所以需要存下来before 注意记得修改before
 Complexity  时间复杂度 O(n), 不需要再优化了 空间复杂度 O(1), 用了两个节点保存前一个节点和本身
 Other Answer  大神们的解法使用递归，这样就需要多余的空间了 3 line recursive solution
 </description>
    </item>
    
    <item>
      <title>LeetCode-21</title>
      <link>https://linna-li.github.io/2021/21-merge-two-sorted-lists/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/21-merge-two-sorted-lists/</guid>
      <description>Description  合并两个有序的链表
 My answer  是一个easy的题，但是我感觉写的好长，肯定有简单办法来解 我是定义了一个head，一个current，然后两个指针分别移动两个链表 比较大小，然后合并
 Complexity  时间复杂度 O(n + m) 空间复杂度 用了4个指针
 Other answer  和我的想法类似，但是只用了两个指针。一个head保存答案，一个handler保存在哪个list。 用递归  </description>
    </item>
    
    <item>
      <title>LeetCode-83</title>
      <link>https://linna-li.github.io/2021/83-remove-duplicated-from-sorted-list/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/83-remove-duplicated-from-sorted-list/</guid>
      <description>Description  给了一个链表，删除其中重复的节点
 My Answer  我的思路很简单 存下before和current的节点，进行比较 记得判断边界case，head是null的情况
 Complexity 我自己的解法时间复杂度应该是O(n)了，但是结果却是：
 Runtime: 1 ms, faster than 15.21% of Java online submissions for Remove Duplicates from Sorted List. Memory Usage: 41.4 MB, less than 6.06% of Java online submissions for Remove Duplicates from Sorted List.
 Other Answer  可以优化成为只要一个辅助节点。优化过后是：   Runtime: 0 ms, faster than 100.00% of Java online submissions for Remove Duplicates from Sorted List. Memory Usage: 38.</description>
    </item>
    
    <item>
      <title>LeetCode-237</title>
      <link>https://linna-li.github.io/2021/237-delete-node-in-a-linked-list/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/237-delete-node-in-a-linked-list/</guid>
      <description>Description  从链表中删除给定的节点 没有给定头节点，只给定了要被删掉的节点
 My Answer  这是一道easy题，但是好多人dislike，确实我自己也想不到这个解法，最后还是看了答案 但是没有办法找到上一个节点，所以只能把自己的值改成下一个节点的值，然后把自己的next修改掉
 Complexity Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-160</title>
      <link>https://linna-li.github.io/2021/160-intersection-of-two-linked-lists/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/160-intersection-of-two-linked-lists/</guid>
      <description>Description  找到两个链表的交点
 My answer  这是一道easy题，但是要求时间复杂度是O(n)，于是我想了好久。。 后来发现最笨的方法也可以过 就是现求出来两个链表的差距，然后走到相同的相对位置上，看看能不能找到一个相同的节点，如果能找到，就说明这个节点是相交的节点（因为后面不会再分叉开了）
 Complexity Other answer  后来我去看了讨论区，大部分人还是和我一样的解法，有一个大神的解法代码更简单，两个指针一起走，走到头了之后就去另外一个链表接着走，直到找到一个相同的节点，或者两个都是null的时候，说明没有相交节点
 </description>
    </item>
    
    <item>
      <title>LeetCode-141</title>
      <link>https://linna-li.github.io/2021/141-linked-list-cycle/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/141-linked-list-cycle/</guid>
      <description>Description My Answer  这道题我记得思路是快慢指针, 但是纠结了好久怎么证明，后来小伙伴提醒我说线性增长，有环的话一定会相遇。循环的结束条件都是查快指针就可以
 Complexity  时间复杂度 O(n), 不需要再优化了 空间复杂度 O(1), 用了两个指针
 Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-142</title>
      <link>https://linna-li.github.io/2021/142-linked-list-cycle-ii/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2021/142-linked-list-cycle-ii/</guid>
      <description>Description  如果链中有环，找到环的入口
 My Answer  大神给画的图.
  快指针和慢指针会在环的内部相遇 经过推导可以知道 起点到环入口的长度==相遇点到环入口的长度 让快慢指针每次走一步就可以找到环入口的长度
 Complexity Other Answer </description>
    </item>
    
    <item>
      <title>LeetCode-2</title>
      <link>https://linna-li.github.io/2020/2-add-two-numbers/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linna-li.github.io/2020/2-add-two-numbers/</guid>
      <description>Description My Answer Complexity Other Answer </description>
    </item>
    
  </channel>
</rss>